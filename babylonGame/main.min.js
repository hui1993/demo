/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"main": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./src/index.ts","vendors"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/game-utils.ts":
/*!***************************!*\
  !*** ./src/game-utils.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var BABYLON = __webpack_require__(/*! babylonjs */ "./node_modules/babylonjs/babylon.js");
var GUI = __webpack_require__(/*! babylonjs-gui */ "./node_modules/babylonjs-gui/babylon.gui.min.js");
var rxjs_1 = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/Rx.js");
var GameUtils = /** @class */ (function () {
    function GameUtils() {
    }
    /**
     * Creates a basic ground
     * @param scene
     */
    GameUtils.createGround = function (scene) {
        // Ground
        var groundMaterial = new BABYLON.StandardMaterial("groundMaterial", scene);
        groundMaterial.diffuseTexture = new BABYLON.Texture("./assets/texture/ground.jpg", scene);
        //groundMaterial.diffuseTexture.uScale = groundMaterial.diffuseTexture.vScale = 4;
        var ground = BABYLON.Mesh.CreateGround("ground", 512, 512, 32, scene, false);
        ground.position.y = -1;
        ground.material = groundMaterial;
        return ground;
    };
    /**
     * Creates a second ground and adds a watermaterial to it
     * @param scene
     */
    GameUtils.createWater = function (scene) {
        // Water
        var waterMesh = BABYLON.Mesh.CreateGround("waterMesh", 512, 512, 32, scene, false);
        var waterMaterial = GameUtils.createWaterMaterial("water", "./assets/texture/waterbump.png", scene);
        waterMesh.material = waterMaterial;
        waterMesh.position.y = 4;
        return waterMaterial;
    };
    /**
     * Creates a BABYLONJS GUI with a single Button
     */
    GameUtils.createGui = function (btnText, btnClicked) {
        var guiTexture = GUI.AdvancedDynamicTexture.CreateFullscreenUI("UI");
        var btnTest = GUI.Button.CreateSimpleButton("but1", btnText);
        btnTest.width = "150px";
        btnTest.height = "40px";
        btnTest.color = "white";
        btnTest.background = "grey";
        btnTest.onPointerUpObservable.add(function () {
            if (btnClicked) {
                btnClicked(btnTest);
            }
        });
        btnTest.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;
        btnTest.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;
        btnTest.left = 12;
        btnTest.top = 12;
        guiTexture.addControl(btnTest);
    };
    /**
     * Returns Observable of mesh array, which are loaded from a file.
     * After mesh importing all meshes become given scaling, position and rotation.
     * @param fileName
     * @param scene
     * @param scaling
     * @param position
     * @param rotationQuaternion
     */
    GameUtils.createMeshFromObjFile = function (folderName, fileName, scene, scaling, position, rotationQuaternion) {
        if (!fileName) {
            return rxjs_1.Observable.throw("GameUtils.createMeshFromObjFile: parameter fileName is empty");
        }
        if (!scene) {
            return rxjs_1.Observable.throw("GameUtils.createMeshFromObjFile: parameter fileName is empty");
        }
        if (!folderName)
            folderName = "";
        if (!scaling)
            scaling = BABYLON.Vector3.One();
        if (!position)
            position = BABYLON.Vector3.Zero();
        if (!rotationQuaternion)
            rotationQuaternion = BABYLON.Quaternion.RotationYawPitchRoll(0, 0, 0);
        var assetsFolder = './assets/' + folderName;
        return rxjs_1.Observable.create(function (observer) {
            BABYLON.SceneLoader.ImportMesh(null, assetsFolder, fileName, scene, function (meshes, particleSystems, skeletons) {
                meshes.forEach(function (mesh) {
                    mesh.position = position;
                    mesh.rotationQuaternion = rotationQuaternion;
                    mesh.scaling = scaling;
                });
                console.log("Imported Mesh: " + fileName);
                observer.next(meshes);
            });
        });
    };
    /**
     * Creates a new skybox with the picttures under fileName.
     * @param name
     * @param fileName
     * @param scene
     */
    GameUtils.createSkybox = function (name, fileName, scene) {
        if (!name) {
            console.error("GameUtils.createSkyBox: name is not defined");
            return;
        }
        if (!fileName) {
            console.error("GameUtils.createSkyBox: fileName is not defined");
            return;
        }
        if (!scene) {
            console.error("GameUtils.createSkyBox: scene is not defined");
            return;
        }
        // Skybox
        var skybox = BABYLON.Mesh.CreateBox(name, 1000.0, scene);
        var skyboxMaterial = new BABYLON.StandardMaterial(name, scene);
        skyboxMaterial.backFaceCulling = false;
        skyboxMaterial.reflectionTexture = new BABYLON.CubeTexture("./assets/texture/skybox/TropicalSunnyDay", scene);
        skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;
        skyboxMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);
        skyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);
        skyboxMaterial.disableLighting = true;
        skybox.material = skyboxMaterial;
    };
    /**
     * Creates a new WaterMaterial Object with a given name. The noiseFile descrips the noise in the water,
     * @param name
     * @param noiseFile
     * @param scene
     */
    GameUtils.createWaterMaterial = function (name, noiseFile, scene) {
        if (!name) {
            console.error("GameUtils.createWaterMaterial: name is not defined");
            return;
        }
        if (!noiseFile) {
            console.error("GameUtils.createWaterMaterial: noiseFile is not defined");
            return;
        }
        if (!scene) {
            console.error("GameUtils.createWaterMaterial: scene is not defined");
            return;
        }
        // Water material
        var water = new BABYLON.WaterMaterial(name, scene);
        water.bumpTexture = new BABYLON.Texture(noiseFile, scene);
        // Water properties
        water.windForce = -15;
        water.waveHeight = 0;
        water.windDirection = new BABYLON.Vector2(1, 1);
        water.waterColor = new BABYLON.Color3(0.25, 0.88, 0.82);
        water.colorBlendFactor = 0.3;
        water.bumpHeight = 0.1;
        water.waveLength = 0.1;
        return water;
    };
    /**
     * Loads a shark model from .obj file and adds it scene.
     * @param scene
     */
    GameUtils.createShark = function (scene) {
        // create a mesh object with loaded from file
        var rootMesh = BABYLON.MeshBuilder.CreateBox("rootMesh", { size: 1 }, scene);
        rootMesh.isVisible = false;
        rootMesh.position.y = 0.4;
        rootMesh.rotation.y = -3 * Math.PI / 4;
        return new rxjs_1.Observable(function (observer) {
            GameUtils.createMeshFromObjFile("mesh/", "mesh.obj", scene, new BABYLON.Vector3(1, 1, 1))
                .subscribe(function (meshes) {
                meshes.forEach(function (mesh) {
                    mesh.parent = rootMesh;
                });
                observer.next(rootMesh);
            });
        });
    };
    /**
     * 创建一个球体
     */
    GameUtils.creatSphere = function (scene) {
        var sphere = BABYLON.Mesh.CreateSphere("Sphere", 32, 3, scene);
        sphere.position = new BABYLON.Vector3(0, 5, 0);
        // Sphere4 material
        var material = new BABYLON.StandardMaterial("kosh4", scene);
        material.diffuseColor = new BABYLON.Color3(0, 0, 0);
        material.emissiveColor = BABYLON.Color3.White();
        material.specularPower = 64;
        // Fresnel
        // material.emissiveFresnelParameters = new BABYLON.FresnelParameters();
        // material.emissiveFresnelParameters.power = 4;
        // material.emissiveFresnelParameters.bias = 0.5;
        // material.emissiveFresnelParameters.leftColor = BABYLON.Color3.White();
        // material.emissiveFresnelParameters.rightColor = BABYLON.Color3.Black();
        // sphere.material = material;
        sphere.actionManager = new BABYLON.ActionManager(scene);
        // sphere.actionManager.registerAction(new BABYLON.SetValueAction(BABYLON.ActionManager.OnPointerOutTrigger, sphere.material, "emissiveColor", sphere.material.emissiveColor));
        // sphere.actionManager.registerAction(new BABYLON.SetValueAction(BABYLON.ActionManager.OnPointerOverTrigger, sphere.material, "emissiveColor", BABYLON.Color3.White()));
        sphere.actionManager.registerAction(new BABYLON.SetValueAction(BABYLON.ActionManager.OnPointerOutTrigger, sphere, "scaling", new BABYLON.Vector3(1, 1, 1)));
        sphere.actionManager.registerAction(new BABYLON.SetValueAction(BABYLON.ActionManager.OnPointerOverTrigger, sphere, "scaling", new BABYLON.Vector3(1.1, 1.1, 1.1)));
        // Create pointerDragBehavior in the desired mode
        //var pointerDragBehavior = new BABYLON.PointerDragBehavior({});
        //var pointerDragBehavior = new BABYLON.PointerDragBehavior({dragPlaneNormal: new BABYLON.Vector3(0,1,0)});
        var pointerDragBehavior = new BABYLON.PointerDragBehavior();
        // Use drag plane in world space
        pointerDragBehavior.useObjectOrienationForDragging = false;
        // Listen to drag events
        pointerDragBehavior.onDragStartObservable.add(function (event) {
            console.log("dragStart");
            console.log(event);
        });
        pointerDragBehavior.onDragObservable.add(function (event) {
            console.log("drag");
            console.log(event);
        });
        pointerDragBehavior.onDragEndObservable.add(function (event) {
            console.log("dragEnd");
            console.log(event);
        });
        // If handling drag events manually is desired, set move attached to false
        // pointerDragBehavior.moveAttached = false;
        sphere.addBehavior(pointerDragBehavior);
        return sphere;
    };
    return GameUtils;
}());
exports.GameUtils = GameUtils;


/***/ }),

/***/ "./src/game.ts":
/*!*********************!*\
  !*** ./src/game.ts ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var game_utils_1 = __webpack_require__(/*! ./game-utils */ "./src/game-utils.ts");
var BABYLON = __webpack_require__(/*! babylonjs */ "./node_modules/babylonjs/babylon.js");
var Game = /** @class */ (function () {
    function Game(canvasElement) {
        this._sharkAnimationTime = 0;
        this._swim = false;
        // Create canvas and engine
        this._canvas = document.getElementById(canvasElement);
        this._engine = new BABYLON.Engine(this._canvas, true);
    }
    /**
     * Creates the BABYLONJS Scene
     */
    Game.prototype.createScene = function () {
        var _this = this;
        // create a basic BJS Scene object
        this._scene = new BABYLON.Scene(this._engine);
        // create a FreeCamera, and set its position to (x:0, y:5, z:-10)
        this._camera = new BABYLON.ArcRotateCamera("Camera", 3 * Math.PI / 2, Math.PI / 4, 30, BABYLON.Vector3.Zero(), this._scene);
        this._camera.attachControl(this._canvas, true);
        // create a basic light, aiming 0,1,0 - meaning, to the sky
        this._light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(0, 1, 0), this._scene);
        // create the skybox
        var skybox = game_utils_1.GameUtils.createSkybox("skybox", "./assets/texture/skybox/TropicalSunnyDay", this._scene);
        // creates the sandy ground
        // let ground = GameUtils.createGround(this._scene);
        // creates the watermaterial and adds the relevant nodes to the renderlist
        // let waterMaterial = GameUtils.createWater(this._scene);
        // waterMaterial.addToRenderList(skybox);
        // waterMaterial.addToRenderList(ground);
        // create a shark mesh from a .obj file
        game_utils_1.GameUtils.createShark(this._scene)
            .subscribe(function (sharkMesh) {
            _this._sharkMesh = sharkMesh;
            // this._sharkMesh.getChildren().forEach(
            //     mesh => {
            //         waterMaterial.addToRenderList(mesh);
            //     }
            // );
        });
        // finally the new ui
        game_utils_1.GameUtils.createGui("Start Swimming", function (btn) {
            game_utils_1.GameUtils.creatSphere(_this._scene);
            var textControl = btn.children[0];
            _this._swim = !_this._swim;
            if (_this._swim) {
                textControl.text = "Stop Swimming";
            }
            else {
                textControl.text = "Start Swimming";
            }
        });
        // Physics engine also works
        // let gravity = new BABYLON.Vector3(0, -0.9, 0);
        // this._scene.enablePhysics(gravity, new BABYLON.CannonJSPlugin());
        // this._scene.exclusiveDoubleMode = false;
        this._scene.onPointerObservable.add(function (pointerInfo, eventState) {
            console.log("POINTERUP", pointerInfo);
        }, BABYLON.PointerEventTypes.POINTERUP, false);
        this._scene.onPointerObservable.add(function (pointerInfo, eventState) {
            console.log("POINTERPICK", this);
        }, BABYLON.PointerEventTypes.POINTERPICK, false);
        this._scene.onPointerObservable.add(function (pointerInfo, eventState) {
            console.log("POINTERTAP", this);
        }, BABYLON.PointerEventTypes.POINTERTAP, false);
        this._scene.onPointerObservable.add(function (pointerInfo, eventState) {
            console.log("POINTERDOWN", this);
        }, BABYLON.PointerEventTypes.POINTERDOWN, false);
        this._scene.onPointerObservable.add(function (pointerInfo, eventState) {
            // console.log("POINTERMOVE",pointerInfo, eventState);
        }, BABYLON.PointerEventTypes.POINTERMOVE, false);
    };
    Game.prototype.test = function () {
        game_utils_1.GameUtils.creatSphere(this._scene);
    };
    /**
     * Starts the animation loop.
     */
    Game.prototype.animate = function () {
        var _this = this;
        this._scene.registerBeforeRender(function () {
            var deltaTime = (1 / _this._engine.getFps());
            _this.animateShark(deltaTime);
        });
        // run the render loop
        this._engine.runRenderLoop(function () {
            _this._scene.render();
        });
        // the canvas/window resize event handler
        window.addEventListener('resize', function () {
            _this._engine.resize();
        });
    };
    Game.prototype.animateShark = function (deltaTime) {
        var _this = this;
        if (this._sharkMesh && this._swim) {
            this._sharkAnimationTime += deltaTime;
            this._sharkMesh.getChildren().forEach(function (mesh) {
                var vertexData = BABYLON.VertexData.ExtractFromMesh(mesh);
                var positions = vertexData.positions;
                var numberOfPoints = positions.length / 3;
                for (var i = 0; i < numberOfPoints; i++) {
                    positions[i * 3] +=
                        Math.sin(0.2 * positions[i * 3 + 2] + _this._sharkAnimationTime * 3) * 0.1;
                }
                vertexData.applyToMesh(mesh);
            });
        }
    };
    return Game;
}());
exports.Game = Game;


/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var game_1 = __webpack_require__(/*! ./game */ "./src/game.ts");
__webpack_require__(/*! babylonjs-materials */ "./node_modules/babylonjs-materials/babylonjs.materials.min.js");
__webpack_require__(/*! babylonjs-loaders */ "./node_modules/babylonjs-loaders/babylonjs.loaders.min.js");
var CANNON = __webpack_require__(/*! cannon */ "./node_modules/cannon/build/cannon.js");
window.addEventListener('DOMContentLoaded', function () {
    // Set global variable for cannonjs physics engine
    window.CANNON = CANNON;
    var game = new game_1.Game('renderCanvas');
    game.createScene();
    game.animate();
});


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,